/**
 * Animation de g√©n√©ration de contenu de jeu
 * G√®re les animations, particules et suggestions pendant le processus de g√©n√©ration
 */

// Rendre les fonctions accessibles globalement pour la page d'accueil
let showNewSuggestion;
let initParticles;
let initDanceVideo;

document.addEventListener("DOMContentLoaded", function () {
  // R√©cup√©ration des √©l√©ments du DOM
  const checkbox = document.getElementById("with_images");
  const generateBtn = document.getElementById("generate-btn");
  const overlay = document.getElementById("generation-overlay");
  const creativeSuggestionElement = document.getElementById("creative-suggestion");

  // Masquer la barre de progression s'il y en a une
  const progressBar = document.querySelector(".progress-bar");
  if (progressBar) {
    progressBar.style.display = "none";
  }

  // Initialiser les variables pour la g√©n√©ration
  let withImages = checkbox?.checked ? "true" : "false";

  if (checkbox) {
    checkbox.addEventListener("change", function () {
      withImages = this.checked ? "true" : "false";
    });
  }

  // Fonction pour initialiser la fonctionnalit√© de vid√©o de danse (disponible globalement)
  initDanceVideo = function () {
    console.log("Initialisation de la vid√©o de danse");
    // On utilise setTimeout pour s'assurer que tous les √©l√©ments sont bien charg√©s
    setTimeout(() => {
      const danceButton = document.getElementById("dance-video-button");
      const videoContainer = document.getElementById("video-container");
      const youtubeIframe = document.getElementById("youtube-iframe");
      const closeVideoBtn = document.getElementById("close-video");

      console.log("√âl√©ments de danse:", { danceButton, videoContainer, youtubeIframe, closeVideoBtn });

      if (danceButton && videoContainer && youtubeIframe) {
        // V√©rifier si l'√©v√©nement est d√©j√† attach√©
        if (!danceButton.hasAttribute("data-initialized")) {
          danceButton.setAttribute("data-initialized", "true");

          // Animation l√©g√®re du bouton pour attirer l'attention
          const animationInterval = setInterval(() => {
            if (danceButton.querySelector("span")) {
              danceButton.querySelector("span").innerHTML =
                danceButton.querySelector("span").innerHTML === "Voulez-vous danser en attendant ? üíÉüï∫"
                  ? "Cliquez pour vous amuser en attendant ! üéµüé∂"
                  : "Voulez-vous danser en attendant ? üíÉüï∫";
            } else {
              clearInterval(animationInterval);
            }
          }, 3000);

          // Afficher la vid√©o quand on clique sur le bouton
          danceButton.addEventListener("click", function (e) {
            console.log("Bouton de danse cliqu√©");
            e.preventDefault();

            const danceLink = document.getElementById("dance-link");
            if (danceLink) {
              // Cacher le bouton
              danceLink.style.display = "none";

              // Charger et afficher la vid√©o
              youtubeIframe.src = "https://www.youtube.com/embed/m4GbBEEyYtQ?autoplay=1";
              videoContainer.classList.remove("hidden");
            }
          });

          // Fermer la vid√©o
          if (closeVideoBtn) {
            closeVideoBtn.addEventListener("click", function () {
              console.log("Bouton de fermeture cliqu√©");
              youtubeIframe.src = "";
              videoContainer.classList.add("hidden");

              const danceLink = document.getElementById("dance-link");
              if (danceLink) {
                danceLink.style.display = "block";
              }
            });
          }
        }
      }
    }, 100); // Petit d√©lai pour s'assurer que le DOM est pr√™t
  };

  // Fonction pour initialiser les particules (disponible globalement)
  initParticles = function (container) {
    if (!container) return;

    const particleCount = 30; // Nombre de particules
    for (let i = 0; i < particleCount; i++) {
      createParticle(container);
    }
  };

  function createParticle(container) {
    const particle = document.createElement("div");
    particle.classList.add("particle");

    // Position al√©atoire
    const posX = Math.random() * 100;
    const posY = Math.random() * 100;

    // Taille al√©atoire
    const size = Math.random() * 6 + 2;

    // Dur√©e al√©atoire
    const duration = Math.random() * 3 + 2;

    // Direction al√©atoire
    const translateX = (Math.random() - 0.5) * 100;

    // Couleur al√©atoire
    const colors = ["#38bdf8", "#60a5fa", "#a5f3fc", "#7dd3fc", "#e0f2fe"];
    const color = colors[Math.floor(Math.random() * colors.length)];

    // Appliquer les styles
    particle.style.left = `${posX}%`;
    particle.style.top = `${posY}%`;
    particle.style.width = `${size}px`;
    particle.style.height = `${size}px`;
    particle.style.background = color;
    particle.style.animationDuration = `${duration}s`;
    particle.style.setProperty("--translateX", `${translateX}px`);

    container.appendChild(particle);

    // Relancer la particule apr√®s son animation
    setTimeout(() => {
      particle.remove();
      createParticle(container);
    }, duration * 1000);
  }

  // Liste de suggestions cr√©atives √† afficher pendant la g√©n√©ration
  const creativeSuggestions = [
    "Pensez √† int√©grer un arc narratif inattendu dans votre histoire...",
    "Un bon antagoniste a souvent des motivations compr√©hensibles...",
    "Les meilleurs jeux combinent familiarit√© et innovation...",
    "Consid√©rez comment l'environnement influence le gameplay...",
    "Un syst√®me de progression bien pens√© garde les joueurs engag√©s...",
    "Les personnages m√©morables ont souvent des faiblesses marqu√©es...",
    "Le worldbuilding se fait par petites touches, pas seulement par exposition...",
    "Pensez aux √©motions que vous souhaitez provoquer chez le joueur...",
    "Un bon level design guide subtilement le joueur sans qu'il s'en aper√ßoive...",
    "La musique et l'ambiance sonore sont essentielles √† l'immersion...",
    "L'√©quilibre entre d√©fi et r√©compense est crucial pour l'exp√©rience de jeu...",
    "Les meilleurs jeux permettent plusieurs fa√ßons d'atteindre un objectif...",
    "Le rythme du jeu devrait alterner entre tension et d√©tente...",
    "N'oubliez pas que les m√©caniques de jeu doivent servir l'histoire, et inversement...",
    "Les petits d√©tails environnementaux enrichissent consid√©rablement l'univers...",
    "Un syst√®me de combat satisfaisant est souvent simple √† comprendre mais difficile √† ma√Ætriser...",
  ];

  // Fonction pour afficher une nouvelle suggestion cr√©ative (disponible globalement)
  showNewSuggestion = function () {
    if (!creativeSuggestionElement) return;

    creativeSuggestionElement.style.opacity = 0;

    setTimeout(function () {
      const suggestionIndex = Math.floor(Math.random() * creativeSuggestions.length);
      creativeSuggestionElement.textContent = creativeSuggestions[suggestionIndex];
      creativeSuggestionElement.style.opacity = 1;
    }, 500);
  };

  // Initialiser les particules pour n'importe quelle page contenant un overlay
  const particlesContainer = document.querySelector(".particles-container");
  if (particlesContainer) {
    initParticles(particlesContainer);
  }

  // N'initialisons pas automatiquement la vid√©o ici, les templates s'en chargeront explicitement
  // initDanceVideo();

  // Page de d√©tail du jeu uniquement - si le bouton de g√©n√©ration existe
  if (generateBtn && overlay) {
    // Ajouter l'√©v√©nement au bouton
    generateBtn.addEventListener("click", function () {
      // Activer l'overlay
      overlay.classList.add("active");

      const generationMessage = document.getElementById("generation-message");
      const generationStatus = document.getElementById("generation-status");

      // D√©finir un message simple
      if (generationMessage) {
        generationMessage.textContent = "G√©n√©ration de l'univers de jeu en cours...";
      }

      if (generationStatus) {
        generationStatus.textContent = "Merci de patienter quelques instants";
      }

      // Initialiser la fonctionnalit√© de vid√©o de danse
      initDanceVideo();

      // D√©marrer les suggestions cr√©atives
      showNewSuggestion();
      const suggestionInterval = setInterval(showNewSuggestion, 5000);

      // Simuler un d√©lai avant la redirection
      setTimeout(function () {
        // Obtenir l'ID du jeu √† partir des attributs data
        const gameId = overlay.dataset.gameId || (window.location.pathname.match(/\/games\/([^\/]+)\//) || [])[1];

        // Redirection apr√®s un d√©lai
        const redirectUrl = `/generator/game/${gameId}/generate/?with_images=${withImages}`;
        window.location.href = redirectUrl;
      }, 3000); // 3 secondes de d√©lai pour voir l'animation
    });
  }
});
